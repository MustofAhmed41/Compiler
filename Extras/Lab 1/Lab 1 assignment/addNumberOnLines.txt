1: #include <stdio.h>
2: int MAXSIZE = 100;
3: int stack[100];
4: int top = -1;
5: 
6: int isempty() {
7: 
8:    if(top == -1)
9:       return 1;
10:    else
11:       return 0;
12: }
13: 
14: int isfull() {
15: 
16:    if(top == MAXSIZE)
17:       return 1;
18:    else
19:       return 0;
20: }
21: 
22: int peek() {
23:    return stack[top];
24: }
25: 
26: int pop() {
27:    int data;
28: 
29:    if(!isempty()) {
30:       data = stack[top];
31:       top = top - 1;
32:       return data;
33:    } else {
34:       printf("Could not retrieve data, Stack is empty.\n");
35:    }
36: }
37: 
38: int push(int data) {
39: 
40:    if(!isfull()) {
41:       top = top + 1;
42:       stack[top] = data;
43:    } else {
44:       printf("Could not insert data, Stack is full.\n");
45:    }
46: }
47: 
48: int printNumber(int num, FILE *p)
49: {
50:     char converter;
51: 
52:     while(num!=0)
53:     {
54:         int lastDigit = num%10;
55:         num /= 10;
56:         push(lastDigit);
57:     }
58: 
59:     while(!isempty())
60:     {
61:         int data = pop();
62:         converter = (char) data-208;
63:         fputc(converter,p);
64:     }
65: 
66:     fputc(':',p);
67:     fputc(' ',p);
68: }
69: 
70: int main()
71: {
72:     FILE *p1, *p2;
73:     char c;
74:     p1 = fopen("addNumberOnLines.c", "r");
75:     p2 = fopen("addNumberOnLines.txt", "w");
76:     int lineNumber = 0;
77:     if(!p1)printf("\nFile can't be opened!");
78:     else
79:     {
80:         printNumber(++lineNumber,p2);
81:         while((c=fgetc(p1))!=EOF)
82:         {
83:             fputc(c,p2);
84:             if(c=='\n'){
85:                 printNumber(++lineNumber,p2);
86:             }
87:         }
88:     }
89: 
90:     fclose(p1);
91:     fclose(p2);
92: 
93:     p2=fopen("addNumberOnLines.txt", "r");
94:     while((c=fgetc(p2)) != EOF)
95:         printf("%c", c);
96:     fclose(p2);
97: 
98: 
99:     return 0;
100: }
101: 